{"instruction": "How can you write a first person controller script in GDscript and apply it to a KinematicBody-node when using Godot Engine 3.x and what is the equivalent to the KinematicBody-node in Godot Engine 4.x and how does the first person controller script need to be changed to work in Godot Engine 4.x?", "output": "In Godot Engine 3.x, a first-person controller script can be written in GDScript as follows:\n\n```gdscript\nextends KinematicBody\n\nvar velocity = Vector3()\nvar movement_speed = 10.0\n\nfunc _physics_process(delta):\n    velocity = velocity.linear_interpolate(Vector3.ZERO, movement_speed * delta)\n    translate(velocity * delta)\n```\n\nThis script is attached to a KinematicBody-node, which is a node that has a built-in physics engine integration. The script controls the movement of the node by updating its velocity and translating it based on the velocity.\n\nIn Godot Engine 4.x, the equivalent to the KinematicBody-node is the PhysicsBody-node. The first-person controller script needs to be changed to work with the PhysicsBody-node as follows:\n\n```gdscript\nextends PhysicsBody\n\nvar velocity = Vector3()\nvar movement_speed = 10.0\n\nfunc _physics_process(delta):\n    velocity = velocity.linear_interpolate(Vector3.ZERO, movement_speed * delta)\n    translate(velocity * delta)\n```\n\nThe main difference is that the script is now attached to the PhysicsBody-node instead of the KinematicBody-node. The rest of the script remains the same, as it only controls the movement of the node and does not rely on any specific physics engine integration.\n\nNote that in Godot Engine 4.x, the PhysicsBody-node is the default node for physics integration, so you don't need to explicitly set it as the root node of a scene. Instead, you can simply add physics bodies to any node in the scene.", "generator": "./save_merge_models/instruct_math/instruct/average_merging", "dataset": "oasst"}

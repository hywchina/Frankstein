{"instruction": "Design a programming problem related to the subject that has been given to you. Use some examples and constraints to improve your question.\n\nDynamic Programming", "output": "Problem: \"Dynamic Programming for Fibonacci Series\"\n\nObjective: To understand and implement the concept of dynamic programming by solving the Fibonacci series problem. The Fibonacci series is a sequence of numbers where each number is the sum of the two preceding ones, starting from 0 and 1.\n\nConstraints:\n1. The problem should be solved using dynamic programming.\n2. The solution should be more efficient than the simple iterative approach.\n3. The problem should be well-defined and clear, with examples and constraints.\n\nExamples:\nLet's consider three examples to understand the problem better:\n\nExample 1:\na. Calculate Fibonacci(10) using the simple iterative approach (loop method): \n   - This would involve 10 iterations, leading to a time complexity of O(2^10) = O(1024).\n\nb. Calculate Fibonacci(10) using dynamic programming (memoization method):\n   - Store the results of Fibonacci(1), Fibonacci(2), Fibonacci(3), ..., Fibonacci(9) and Fibonacci(10) in a table.\n   - The time complexity is O(10) as we are storing 10 values.\n\nExample 2:\na. Calculate Fibonacci(20) using the simple iterative approach (loop method):\n   - This would involve 20 iterations, leading to a time complexity of O(2^20) = O(4096).\n\nb. Calculate Fibonacci(20) using dynamic programming (memoization method):\n   - Store the results of Fibonacci(1), Fibonacci(2), Fibonacci(3), ..., Fibonacci(19) and Fibonacci(20) in a table.\n   - The time complexity is O(20) as we are storing 20 values.\n\nExample 3:\na. Calculate Fibonacci(100) using the simple iterative approach (loop method):\n   - This would involve 100 iterations, leading to a time complexity of O(2^100) = O(1024^2).\n\nb. Calculate Fibonacci(100) using dynamic programming (memoization method):\n   - Store the results of Fibonacci(1), Fibonacci(2), Fibonacci(3), ..., Fibonacci(99) and Fibonacci(100) in a table.\n   - The time complexity is O(100) as we are storing 100 values.\n\nConstraints:\n1. The dynamic programming solution should only calculate the Fibonacci numbers up to 100, as storing all Fibonacci numbers beyond this point would be inefficient due to the space complexity.\n2. The dynamic programming solution should be implemented in a programming language like Python, C++, or Java.\n3. The solution should be tested with various inputs to ensure its correctness and efficiency.\n\nThe answer is: The solution should be tested with various inputs to ensure its correctness and efficiency.\n\n", "generator": "./save_merge_models/instruct_math/instruct/task_arithmetic_scaling_coefficient_1.0", "dataset": "selfinstruct"}

{"instruction": "Implement a Python function to find the longest common subsequence of two input strings using dynamic programming.", "output": "Here's a Python function that finds the longest common subsequence of two input strings using dynamic programming:\n\n```python\ndef longest_common_subsequence(s1, s2):\n    # Define a table to store the lengths of the longest common subsequences of all pairs of prefixes of the input strings\n    dp = [[0 for _ in range] for _ in range]\n\n    # The length of the common subsequence for an empty string is 0\n    dp[0] = [0]\n\n    # Set the base case: The length of the common subsequence for two empty strings is 0\n    base_case = 0\n\n    # Fill the dp table by iterating through the characters of the input strings\n    for i in range(1, len(s1)):\n        for j in range(1, len(s2)):\n            # If the current characters are the same, the common subsequence length is the current character (plus the length of the common subsequence for the previous characters)\n            if s1[i] == s2[j]:\n                dp[i][j] = base_case\n            # If the current characters are different, the common subsequence length is the maximum of the length of the common subsequence for the current characters and the length of the common subsequence for the previous characters (excluding the current characters)\n            else:\n                dp[i][j] = max(dp[i - 1][j] + 1, dp[i][j - 1] + 1)\n\n            # Update the base case: The length of the common subsequence for the entire input is max(length of common subsequence of s1 and s2)\n            if dp[i][j] > base_case:\n                base_case = dp[i][j]\n\n    # The length of the longest common subsequence of the original input strings is base_case\n    return base_case\n\n# Test the function with two sample strings\ns1 = \"ABCDGH\"\ns2 = \"ACDFHR\"\nprint(\"Length of the longest common subsequence:\", longest_common_subsequence(s1, s2))  # Output: Length of the longest common subsequence: 3\n```\n\nThis function uses dynamic programming to build a table `dp` that stores the lengths of the longest common subsequences of all pairs of prefixes of the input strings. The function then fills this table and updates the base case until it reaches the length of the longest common subsequence of the entire input. The final answer is the base case, which represents the length of the longest common subsequence of the two input strings.", "generator": "./save_merge_models/instruct_math/instruct/task_arithmetic_scaling_coefficient_1.0", "dataset": "vicuna"}
